##
## -----------------------
## | N A S - D O C K E R |
## -----------------------
##
## Container based media tools configuration
##
## -- DO NOT EDIT THIS FILE --
##
## Configuration items for this file are taken from the .env file
##
## Have docker-compose.yml and .env in the same directory to launch the stack

version: '3'

######################
# SERVICES TO LAUNCH #
######################

services:

    # ----------------------------------------
    # ORGANIZR
    # Web Frontend for Management
    # ----------------------------------------
    muximux:
        image: organizr/organizr
        container_name: organizr
        restart: unless-stopped
        logging:
            driver: 'json-file'
            options:
                max-file: '${LOG_FILE_NUM}'
                max-size: '${LOG_FILE_SIZE}'
        networks:
            - web
        expose:
            - 80
        environment:
            - TZ=${TZ}
            - PUID=${PUID}
            - PGID=${PGID}
        volumes:
            - '${SYNOLOGY_BASE_DOCKER_PATH}/organizr:/config'
            - '/etc/localtime:/etc/localtime:ro'
        labels:
            - 'traefik.enable=true'
            - 'traefik.docker.network=${STACK_NAME}_web'
            - 'traefik.port=80'
            - 'traefik.frontend.rule=Host:manage.${DOMAIN}'
            - 'traefik.frontend.entryPoints=https'

    

    # ----------------------------------------
    # DELUGEVPN
    # Deluge Torrent Client + VPN
    # ----------------------------------------
    arch-delugevpn:
        image: binhex/arch-delugevpn
        container_name: delugevpn
        restart: unless-stopped
        logging:
            driver: 'json-file'
            options:
                max-file: '${LOG_FILE_NUM}'
                max-size: '${LOG_FILE_SIZE}'
        networks:
            - web
        ports:
            - '${IP_ADDRESS}:8118:8118'
            - '${IP_ADDRESS}:58846:58846'
            - '${IP_ADDRESS}:58946:58946'
        expose:
            - 8112
        cap_add:
            - NET_ADMIN
        environment:
            - TZ=${TZ}
            - PUID=${PUID}
            - PGID=${PGID}
            - VPN_ENABLED=yes
            - VPN_USER=${VPNUNAME}
            - VPN_PASS=${VPNPASS}
            - VPN_REMOTE=${VPN_REMOTE}
            - VPN_PORT=1198
            - VPN_PROTOCOL=udp
            - VPN_DEVICE_TYPE=tun
            - VPN_PROV=${VPNPROVIDER}
            - STRONG_CERTS=no
            - ENABLE_PRIVOXY=yes
            - STRICT_PORT_FORWARD=yes
            - LAN_NETWORK=${CIDR_ADDRESS}
            - NAME_SERVERS=37.235.1.174,8.8.8.8,37.235.1.177,8.8.4.4
            - DEBUG=false

        volumes:
            - '${TORRENTS_PATH}:/data'
            - '${SYNOLOGY_BASE_DOCKER_PATH}/delugevpn/config:/config'
            - '${SYNOLOGY_BASE_DOCKER_PATH}/ovpn/${VPNPROVIDER}:/config/openvpn'
            - '/etc/localtime:/etc/localtime:ro'
        labels:
            - 'traefik.enable=true'
            - 'traefik.docker.network=${STACK_NAME}_web'
            - 'traefik.port=8112'
            - 'traefik.frontend.rule=Host:deluge.${DOMAIN}'
            - 'traefik.frontend.entryPoints=https'


    # ----------------------------------------
    # SONARR
    # TV Series Management
    # ----------------------------------------
    sonarr:
        image: linuxserver/sonarr
        container_name: sonarr
        restart: unless-stopped
        logging:
            driver: 'json-file'
            options:
                max-file: '${LOG_FILE_NUM}'
                max-size: '${LOG_FILE_SIZE}'
        networks:
            - web
        expose:
            - 8989
        environment:
            - TZ=${TZ}
            - PUID=${PUID}
            - PGID=${PGID}
        volumes:
            - '${SYNOLOGY_BASE_DOCKER_PATH}/sonarr:/config'
            - '${TORRENTS_PATH}/Completed:/data/Completed'
            - '${MEDIA_BASE_PATH}/TVShows:/tv'
            - '${MEDIA_BASE_PATH}/Kid TV:/kidtv'
            - '/etc/localtime:/etc/localtime:ro'
        labels:
            - 'traefik.enable=true'
            - 'traefik.docker.network=${STACK_NAME}_web'
            - 'traefik.port=8989'
            - 'traefik.frontend.rule=Host:sonarr.${DOMAIN}'
            - 'traefik.frontend.entryPoints=https'


    # ----------------------------------------
    # RADARR
    # Movie Management
    # ----------------------------------------
    radarr:
        image: linuxserver/radarr
        container_name: radarr
        restart: unless-stopped
        logging:
            driver: 'json-file'
            options:
                max-file: '${LOG_FILE_NUM}'
                max-size: '${LOG_FILE_SIZE}'
        networks:
            - web
        expose:
            - 7878
        environment:
            - TZ=${TZ}
            - PUID=${PUID}
            - PGID=${PGID}
        volumes:
            - '${SYNOLOGY_BASE_DOCKER_PATH}/radarr:/config'
            - '${TORRENTS_PATH}/Completed:/data/Completed'
            - '${MEDIA_BASE_PATH}/Movies:/movies'
            - '${MEDIA_BASE_PATH}/Kid Movies:/kidmovies'
            - '/etc/localtime:/etc/localtime:ro'
        labels:
            - 'traefik.enable=true'
            - 'traefik.docker.network=${STACK_NAME}_web'
            - 'traefik.port=7878'
            - 'traefik.frontend.rule=Host:radarr.${DOMAIN}'
            - 'traefik.frontend.entryPoints=https'


    # ----------------------------------------
    # RADARR 4K
    # Movie Management
    # ----------------------------------------
        radarr4k:
            image: linuxserver/radarr
            container_name: radarr4k
            restart: unless-stopped
            logging:
                driver: 'json-file'
                options:
                    max-file: '${LOG_FILE_NUM}'
                    max-size: '${LOG_FILE_SIZE}'
            networks:
                - web
            expose:
                - 7878
            environment:
                - TZ=${TZ}
                - PUID=${PUID}
                - PGID=${PGID}
            volumes:
                - '${SYNOLOGY_BASE_DOCKER_PATH}/radarr4k:/config'
                - '${TORRENTS_PATH}/Completed:/data/Completed'
                - '${MEDIA_BASE_PATH}/Movies:/movies4k'
                - '/etc/localtime:/etc/localtime:ro'
            labels:
                - 'traefik.enable=true'
                - 'traefik.docker.network=${STACK_NAME}_web'
                - 'traefik.port=7878'
                - 'traefik.frontend.rule=Host:radarr4k.${DOMAIN}'
                - 'traefik.frontend.entryPoints=https'
                - 'traefik.frontend.headers.forceSTSHeader=true'
                - 'traefik.frontend.headers.STSSeconds=315360000'
                - 'traefik.frontend.headers.STSIncludeSubdomains=true'
                - 'traefik.frontend.headers.STSPreload=true'

    # ----------------------------------------
    # JACKETT
    # RSS/TORZNAB Feed Creator
    # ----------------------------------------
    jackett:
        image: linuxserver/jackett
        container_name: jackett
        restart: unless-stopped
        logging:
            driver: 'json-file'
            options:
                max-file: '${LOG_FILE_NUM}'
                max-size: '${LOG_FILE_SIZE}'
        networks:
            - web
        expose:
            - 9117
        environment:
            - TZ=${TZ}
            - PUID=${PUID}
            - PGID=${PGID}
        volumes:
            - '${SYNOLOGY_BASE_DOCKER_PATH}/jackett:/config'
            - '${TORRENTS_PATH}/Completed:/downloads'
            - '/etc/localtime:/etc/localtime:ro'
        labels:
            - 'traefik.enable=true'
            - 'traefik.docker.network=${STACK_NAME}_web'
            - 'traefik.port=9117'
            - 'traefik.frontend.rule=Host:jackett.${DOMAIN}'
            - 'traefik.frontend.entryPoints=https'


    # ----------------------------------------
    # TAUTULLI
    # Monitoring Service for PLEX Usage
    # ----------------------------------------
    plexpy:
        image: linuxserver/tautulli
        container_name: tautulli
        restart: unless-stopped
        logging:
            driver: 'json-file'
            options:
                max-file: '${LOG_FILE_NUM}'
                max-size: '${LOG_FILE_SIZE}'
        networks:
            - web
        expose:
            - 8181
        environment:
            - TZ=${TZ}
            - PUID=${PUID}
            - PGID=${PGID}
        volumes:
            - '${SYNOLOGY_BASE_DOCKER_PATH}/tautulli:/config'
            - './plex/Library/Application Support/Plex Media Server/Logs:/logs:ro'
            - '/etc/localtime:/etc/localtime:ro'
        depends_on:
            - plex
        labels:
            - 'traefik.enable=true'
            - 'traefik.docker.network=${STACK_NAME}_web'
            - 'traefik.port=8181'
            - 'traefik.frontend.rule=Host:plexpy.${DOMAIN}'
            - 'traefik.frontend.entryPoints=https'


    # ----------------------------------------
    # OMBI
    # Request Service for Plex Content
    # ----------------------------------------
    ombi:
        image: linuxserver/ombi
        container_name: ombi
        restart: unless-stopped
        logging:
            driver: 'json-file'
            options:
                max-file: '${LOG_FILE_NUM}'
                max-size: '${LOG_FILE_SIZE}'
        networks:
            - web
        expose:
            - 3579
        environment:
            - TZ=${TZ}
            - PUID=${PUID}
            - PGID=${PGID}
        volumes:
            - '${SYNOLOGY_BASE_DOCKER_PATH}/ombi:/config'
            - '/etc/localtime:/etc/localtime:ro'
        labels:
            - 'traefik.enable=true'
            - 'traefik.docker.network=${STACK_NAME}_web'
            - 'traefik.port=3579'
            - 'traefik.frontend.rule=Host:request.${DOMAIN}'
            - 'traefik.frontend.entryPoints=https'


    # ----------------------------------------
    # PORTAINER
    # Docker Container Management
    # ----------------------------------------
    portainer:
        image: portainer/portainer:latest
        container_name: portainer
        restart: unless-stopped
        logging:
            driver: 'json-file'
            options:
                max-file: '${LOG_FILE_NUM}'
                max-size: '${LOG_FILE_SIZE}'
        networks:
            - web
        expose:
            - 9000
        environment:
            - TZ=${TZ}
            - PUID=${PUID}
            - PGID=${PGID}
        volumes:
            - '${SYNOLOGY_BASE_DOCKER_PATH}/portainer:/data'
            - '/var/run/docker.sock:/var/run/docker.sock'
            - '/etc/localtime:/etc/localtime:ro'
        labels:
            - 'traefik.enable=true'
            - 'traefik.docker.network=${STACK_NAME}_web'
            - 'traefik.port=9000'
            - 'traefik.frontend.rule=Host:portainer.${DOMAIN}'
            - 'traefik.frontend.entryPoints=https'


    # ----------------------------------------
    # WATCHTOWER
    # Automatic Update Service for Docker VMs
    # ----------------------------------------
    watchtower:
        image: v2tec/watchtower
        container_name: watchtower
        restart: unless-stopped
        logging:
            driver: 'json-file'
            options:
                max-file: '${LOG_FILE_NUM}'
                max-size: '${LOG_FILE_SIZE}'
        networks:
            - internal
        environment:
            - TZ=${TZ}
            - PUID=${PUID}
            - PGID=${PGID}
            - WATCHTOWER_NOTIFICATIONS=email
            - WATCHTOWER_NOTIFICATION_EMAIL_FROM=${SMTP_FROM}
            - WATCHTOWER_NOTIFICATION_EMAIL_TO=${WATCHTOWER_EMAIL}
            - WATCHTOWER_NOTIFICATION_EMAIL_SERVER=${SMTP_SERVER}
            - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT=${SMTP_PORT}
            - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER=${SMTP_USER}
            - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD=${SMTP_PASS}
        volumes:
            - '/var/run/docker.sock:/var/run/docker.sock'
            - '/etc/ssl/certs:/etc/ssl/certs'
        command: --schedule @midnight --cleanup
        labels:
            - 'traefik.enable=false'

    # ----------------------------------------
    # InfluxDB
    # Time Series Database
    # ----------------------------------------
    influxdb:
        image: influxdb
        container_name: influxdb
        restart: unless-stopped
        logging:
            driver: 'json-file'
            options:
                max-file: '${LOG_FILE_NUM}'
                max-size: '${LOG_FILE_SIZE}'
        networks:
            - internal
        expose:
            - 8086
        environment:
            - TZ=${TZ}
            - PUID=${PUID}
            - PGID=${PGID}
            - INFLUXDB_DB=speedtest; CREATE DATABASE varken;
        volumes:
            - '${SYNOLOGY_BASE_DOCKER_PATH}/influxdb:/var/lib/influxdb'
        labels:
            - 'traefik.enable=false'

    # ----------------------------------------
    # Chronograf
    # Dashboard Tool for Speedtest
    # ----------------------------------------
    chronograf:
        image: chronograf
        container_name: chronograf
        restart: unless-stopped
        logging:
            driver: 'json-file'
            options:
                max-file: '${LOG_FILE_NUM}'
                max-size: '${LOG_FILE_SIZE}'
        networks:
            - web
            - internal
        expose:
            - 8888
        environment:
            - TZ=${TZ}
            - PUID=${PUID}
            - PGID=${PGID}
        volumes:
            - '${SYNOLOGY_BASE_DOCKER_PATH}/chronograf:/var/lib/chronograf'
        command:
            - chronograf
            - --influxdb-url=http://influxdb:8086
        depends_on:
            - influxdb
        labels:
            - 'traefik.enable=true'
            - 'traefik.docker.network=${STACK_NAME}_web'
            - 'traefik.port=8888'
            - 'traefik.frontend.rule=Host:chronograf.${DOMAIN}'
            - 'traefik.frontend.entryPoints=https'


    # ----------------------------------------
    # Speedtest
    # Speedtest-CLI and Post to InfluxDB
    # ----------------------------------------
    speedtest:
        image: phikai/speedtest
        container_name: speedtest
        restart: unless-stopped
        logging:
            driver: 'json-file'
            options:
                max-file: '${LOG_FILE_NUM}'
                max-size: '${LOG_FILE_SIZE}'
        networks:
            - internal
        environment:
            - TZ=${TZ}
            - PUID=${PUID}
            - PGID=${PGID}
            - TEST_INTERVAL=${SPEEDTEST_INTERVAL}
        depends_on:
            - influxdb
        labels:
            - 'traefik.enable=false'

    # ----------------------------------------
    # TRAEFIK
    # Reverse Proxy + SSL Support
    # ----------------------------------------
    traefik:
        image: traefik:v1.7.16
        container_name: traefik
        restart: unless-stopped
        logging:
            driver: 'json-file'
            options:
                max-file: '${LOG_FILE_NUM}'
                max-size: '${LOG_FILE_SIZE}'
        networks:
            - web
        ports:
            - '80:80'
            - '443:443'
            - '8080:8080'
        environment:
            - TZ=${TZ}
            - PUID=${PUID}
            - PGID=${PGID}
        volumes:
            - '/var/run/docker.sock:/var/run/docker.sock'
            - '${SYNOLOGY_BASE_DOCKER_PATH}/traefik:/etc/traefik/acme'
            - '${SYNOLOGY_BASE_DOCKER_PATH}/traefik/traefik.toml:/traefik.toml'
        command:
            - --docker
            - --api
            - --loglevel=debug
            - "--entryPoints=Name:https Address::443 TLS"
            - "--entryPoints=Name:http Address::80 Redirect.EntryPoint:https"
            - --acme.entrypoint=https
            - --acme=true
            - --acme.domains=${DOMAIN}
            - --acme.email=${EMAIL}
            - --acme.ondemand=true
            - --acme.onhostrule
            - --acme.httpchallenge
            - --acme.httpchallenge.entrypoint=http
            - --acme.storage=etc/traefik/acme/acme.json
            - --docker.watch
        labels:
            - 'traefik.enable=true'
            - 'traefik.docker.network=${STACK_NAME}_web'
            - 'traefik.port=8080'
            - 'traefik.frontend.rule=Host:traefik.${DOMAIN}'
            - 'traefik.frontend.entryPoints=https'
            - 'traefik.frontend.auth.basic=${TRAEFIK_AUTH}'

        extra_hosts:
            - host.docker.internal:172.17.0.1

########################
# GLOBAL CONFIGURATION #
########################

networks:
    internal:
    web:
